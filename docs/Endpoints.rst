
.. include:: global.rst.inc

===========
 Endpoints
===========

*Endpoints* are objects that represent the server-side of http transactions.
They are instances of the DeproxyEndpoint_ class.
Endpoint receive HTTP requests and return HTTP responses.
The responses are generated by *handlers*, which can be static functions, object instance methods, or closures.
Handlers can be set when the endpoint is created, or specified on a per-client-request basis.
Endpoints are created using the ``addEndpoint`` method of the ``Deproxy`` class.

How To: Single Server
---------------------

In the simplest case, a proxy sits in between the client and a server.
::

  ________                         ________                        ________
 |        |  --->  Request  --->  |        |  ---> Request  --->  |        |
 | Client |                       | Proxy  |                      | Server |
 |________|  <---  Response <---  |________|  <--- Response <---  |________|


Since we're testing the proxy, we want to be able to control the responses that the server sends in reaction to requests from the proxy.
We can simulate the
the case of a single client, proxy and server

endpoint takes the place of the server


How To: Auxiliary Service
-------------------------

Auxiliary service, e.g. for authentication
two endpoints, one for server and one for aux service
::

  ________                         ________                        ________
 |        |  --->  Request  --->  |        |  ---> Request  --->  |        |
 | Client |                       | Proxy  |                      | Server |
 |________|  <---  Response <---  |________|  <--- Response <---  |________|

                                    |    ^
                            Request |    |  Response
                                    v    |
                                   ________
                                  |  Aux.  |
                                  |Service |
                                  |________|



How To: Multiple Servers
------------------------

Multiple servers, e.g. load balancing or versioning
one endpoint for each server
::

                                                                   ________
                                    .------------> Request  --->  |        |
                                    |                             | Server1|
                                    |    .-------- Response <---  |________|
                                    |    |
                                    |    v
  ________                         ________                        ________
 |        |  --->  Request  --->  |        |  ---> Request  --->  |        |
 | Client |                       | Proxy  |                      | Server2|
 |________|  <---  Response <---  |________|  <--- Response <---  |________|

                                    ^    |
                                    |    |                         ________
                                    |    `-------- Request  --->  |        |
                                    |                             | Server3|
                                    `------------- Response <---  |________|

Misc.
=============

Threading
Persistent connections / connection re-use
Ports