
.. include:: global.rst.inc

.. _Endpoints:

===========
 Endpoints
===========

*Endpoints* are objects that represent the server-side of http transactions.
They are instances of the DeproxyEndpoint_ class.
Endpoint receive HTTP requests and return HTTP responses.
The responses are generated by :ref:`handlers <Handlers>`, which can be static functions, object instance methods, or closures.
Handlers can be set when the endpoint is created, or specified on a per-client-request basis.
Endpoints are created using the ``addEndpoint`` method of the ``Deproxy`` class.

Endpoints are very flexible. You can create intricate testing situations with them in combination with custom handlers.

How To: Single Server
---------------------

In the simplest case, a proxy sits in between the client and a server.
::

  ________                         ________                        ________
 |        |  --->  Request  --->  |        |  ---> Request  --->  |        |
 | Client |                       | Proxy  |                      | Server |
 |________|  <---  Response <---  |________|  <--- Response <---  |________|


Since we're testing the proxy, we want to be able to control the responses that the server sends in reaction to requests from the proxy.
We can simulate the
the case of a single client, proxy and server

endpoint takes the place of the server


::

    Deproxy deproxy = new Deproxy()

    DeproxyEndpoint endpoint = deproxy.addEndpoint(9999)

    def theProxy = new TheProxy(port: 8080, targetHostname: "localhost", targetPort: 9999)

    def mc = deproxy.makeRequest(url: "http://localhost:8080/path/to/resource")

    assert mc.receivedResponse.code == "200"
    assert mc.handlings.size() == 1




How To: Auxiliary Service
-------------------------

Auxiliary service, e.g. for authentication
two endpoints, one for server and one for aux service
::

  ________                         ________                        ________
 |        |  --->  Request  --->  |        |  ---> Request  --->  |        |
 | Client |                       | Proxy  |                      | Server |
 |________|  <---  Response <---  |________|  <--- Response <---  |________|

                                    |    ^
                            Request |    |  Response
                                    v    |
                                   ________
                                  |  Aux.  |
                                  |Service |
                                  |________|

::

    Deproxy deproxy = new Deproxy()

    def endpoint = deproxy.addEndpoint(9999)

    def authResponder = new AuthResponder()
    def authService = deproxy.addEndpoint(7777, defaultHandler: authResponder.handler)

    def theProxy = new TheProxy(port: 8080, targetHostname: "localhost", targetPort: 9999)
    theProxy.setAuthenticationService(hostname: "localhost", port: "7777)
    theProxy.authenticateClientRequests = true

    def mc = deproxy.makeRequest(url: "http://localhost:8080/path/to/resource", headers: ['X-User': 'valid-user'])

    assert mc.receivedResponse.code == "200"
    assert mc.handlings.size() == 1
    assert mc.handlings[0].endpoint == endpoint
    assert mc.orphanedHandlings.size() == 1
    assert mc.orphanedHandlings[0].endpoint == authService

    def mc = deproxy.makeRequest(url: "http://localhost:8080/path/to/resource", headers: ['X-User': 'invalid-user'])

    assert mc.receivedResponse.code == "403"
    assert mc.handlings.size() == 0
    assert mc.orphanedHandlings.size() == 1
    assert mc.orphanedHandlings[0].endpoint == authService



How To: Multiple Servers
------------------------

Multiple servers, e.g. load balancing or versioning
one endpoint for each server
::

                                                                   ________
                                    .------------> Request  --->  |        |
                                    |                             | Server1|
                                    |    .-------- Response <---  |________|
                                    |    |
                                    |    v
  ________                         ________                        ________
 |        |  --->  Request  --->  |        |  ---> Request  --->  |        |
 | Client |                       | Proxy  |                      | Server2|
 |________|  <---  Response <---  |________|  <--- Response <---  |________|

                                    ^    |
                                    |    |                         ________
                                    |    `-------- Request  --->  |        |
                                    |                             | Server3|
                                    `------------- Response <---  |________|



::

    Deproxy deproxy = new Deproxy()

    def endpoint1 = deproxy.addEndpoint(9999)
    def endpoint2 = deproxy.addEndpoint(9998)
    def endpoint3 = deproxy.addEndpoint(9997)

    def theProxy = new TheProxy(port: 8080,
                                targets: [
                                    ['hostname': "localhost", port: 9999],
                                    ['hostname': "localhost", port: 9998],
                                    ['hostname': "localhost", port: 9997]],
                                loadBanaceBehavior: Behavior.RoundRobin)

    def mc = deproxy.makeRequest(url: "http://localhost:8080/path/to/resource")

    assert mc.receivedResponse.code == "200"
    assert mc.handlings.size() == 1
    assert mc.handlings[0].endpoint == endpoint1

    def mc = deproxy.makeRequest(url: "http://localhost:8080/path/to/resource")

    assert mc.receivedResponse.code == "200"
    assert mc.handlings.size() == 1
    assert mc.handlings[0].endpoint == endpoint2

    def mc = deproxy.makeRequest(url: "http://localhost:8080/path/to/resource")

    assert mc.receivedResponse.code == "200"
    assert mc.handlings.size() == 1
    assert mc.handlings[0].endpoint == endpoint3



Misc.
=============

Threading
Persistent connections / connection re-use
Ports